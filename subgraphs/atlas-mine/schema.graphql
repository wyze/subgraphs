enum Lock {
  TwoWeeks
  OneMonth
  ThreeMonths
  SixMonths
  TwelveMonths
}

"Daily stats"
type Daily @entity {
  id: Bytes!

  "Deposit counts for the day"
  depositCount: Int!

  "Deposited amount for the day"
  deposited: BigDecimal!

  "Deposits for the day"
  deposits: [Deposit!]! @derivedFrom(field: "day")

  "Harvest counts for the day"
  harvestCount: Int!

  "Harvested amount for the day"
  harvested: BigDecimal!

  "Harvests for the day"
  harvests: [Reward!]! @derivedFrom(field: "day")

  "Date of these stats"
  date: Int!

  "Unlock counts for the day"
  unlockCounts: Int!

  "Unlocked amount for the day"
  unlocked: BigDecimal!

  "Unlocks for the day"
  unlocks: [Unlock!]! @derivedFrom(field: "day")

  "Withdrawal counts for the day"
  withdrawalCounts: Int!

  "Withdrawals for the day"
  withdrawals: [Withdrawal!]! @derivedFrom(field: "day")

  "Withdrawn amount for the day"
  withdrawn: BigDecimal!
}

"Deposit event"
type Deposit @entity(immutable: true) {
  id: Bytes!

  "Amount of deposit"
  amount: BigDecimal!

  "Day of deposit"
  day: Daily!

  "The lock period"
  lock: Lock!

  "Reward for this deposit"
  reward: Reward

  "The unlock(s) tied to this deposit"
  unlocks: [UserUnlock!]! @derivedFrom(field: "deposit")

  "The user this deposit belongs to"
  user: User!

  "The withdawal for this deposit"
  withdrawal: Withdrawal
}

"Reward for a deposit"
type Reward @entity {
  id: Bytes!

  "Amount claimed"
  amount: BigDecimal!

  "Day the latest reward was claimed"
  day: Daily!

  "Deposit tied to this reward"
  deposit: Deposit!

  "User this reward belongs to"
  user: User!
}

"NFTs staked as boosts"
type StakedToken @entity {
  id: Bytes!

  "Staking user"
  user: User!

  "NFT contract address"
  contract: Bytes!

  "NFT token ID"
  tokenId: BigInt!

  "Quantity staked"
  amount: Int!
}

"Amount unlocked this day and lock"
type Unlock @entity {
  id: Bytes!

  "Amount unlocked"
  amount: BigDecimal!

  "Day of unlock"
  day: Daily!

  "Lock period"
  lock: Lock!
}

"User record"
type User @entity(immutable: true) {
  id: Bytes!

  "Deposits made by this user"
  deposits: [Deposit!]! @derivedFrom(field: "user")

  "Rewards for this user"
  rewards: [Reward!]! @derivedFrom(field: "user")

  "Staked tokens for this user"
  stakedTokens: [StakedToken!]! @derivedFrom(field: "user")

  "Unlocks for this user"
  unlocks: [UserUnlock!]! @derivedFrom(field: "user")

  "Withdrawals for this user"
  withdrawals: [Withdrawal!]! @derivedFrom(field: "user")
}

"User unlocks"
type UserUnlock @entity(immutable: true) {
  id: Bytes!

  "Amount the user has in this unlock"
  amount: BigDecimal!

  "Deposit tied to this user unlock"
  deposit: Deposit!

  "The unlock for this user"
  unlock: Unlock!

  "The user this unlock is for"
  user: User!
}

"Withdrawals per deposit"
type Withdrawal @entity {
  id: Bytes!

  "Amount withdrawn"
  amount: BigDecimal!

  "Deposit tied to this withdrawal"
  deposit: Deposit!

  "Day the latest withdrawal occurred"
  day: Daily!

  "User tied to this withdrawal"
  user: User!
}
