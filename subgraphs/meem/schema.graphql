enum InputType {
  Consumable
  AuxLegion
  Corruption
  Keys
  Unknown
}

enum OutputType {
  Consumable
  Erc20
  Erc1155
  Unknown
}

"Entity to store burned legions"
type Burn @entity {
  id: Bytes!

  "Token ids burned in this transaction"
  tokenIds: [Int!]!
}

"Information about the merchant"
type Merchant @entity {
  id: Bytes!

  "Time merchant closed"
  closeTime: Int!

  "Time merchant opened"
  openTime: Int!

  "Version of merchant that is live"
  version: Int!
}

"Information about a recipe"
type Recipe @entity {
  id: Bytes!

  "Amount of trades available"
  available: Int!

  "Time when recipe was created"
  createdAt: Int!

  "Input accepted for trade"
  input: InputType!

  "Token id for input, if consumable"
  inputTokenId: Int!

  "Amount for input"
  inputAmount: Int!

  "Time when recipe was removed"
  removedAt: Int
}

type Output @entity(immutable: true) {
  id: Bytes!

  "Address when output is Erc20"
  address: Bytes!

  "Amount of items in this output"
  amount: Int!

  "Output comes from here"
  from: Bytes!

  "Recipe for this output"
  recipe: Recipe!

  "Id of token transfered"
  tokenId: Int!

  "Output type"
  type: OutputType!
}

type Trade @entity(immutable: true) {
  id: Bytes!

  "Legion burned for this trade, if applicable"
  legionBurned: Int

  "Recipe traded for"
  recipe: Recipe!

  "Timestamp of occurence"
  timestamp: Int!

  "User who made the trade"
  user: User!
}

type User @entity(immutable: true) {
  id: Bytes!
}
